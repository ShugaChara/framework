<?php
// +----------------------------------------------------------------------
// | Created by linshan. 版权所有 @
// +----------------------------------------------------------------------
// | Copyright (c) 2019 All rights reserved.
// +----------------------------------------------------------------------
// | Technology changes the world . Accumulation makes people grow .
// +----------------------------------------------------------------------
// | Author: kaka梦很美 <1099013371@qq.com>
// +----------------------------------------------------------------------

namespace ShugaChara\Framework\Console\Commands;

use RuntimeException;
use ShugaChara\Console\Command;
use ShugaChara\Framework\Constant\Consts;
use ShugaChara\Swoole\Manager\ProcessManager;
use Symfony\Component\Console\Helper\Table;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\ConsoleOutput;
use Symfony\Component\Console\Output\OutputInterface;

/**
 * Class ProcessorCommand
 * @package ShugaChara\Framework\Console\Commands
 */
class ProcessorCommand extends Command
{
    protected static $name = 'process';

    /**
     * @var ConsoleOutput
     */
    protected $output;

    /**
     * processor 状态类型
     * @var array
     */
    protected $serverStatusType = [
        Consts::SWOOLE_SERVER_START_NAME,
        Consts::SWOOLE_SERVER_STATUS_NAME,
        Consts::SWOOLE_SERVER_STOP_NAME,
        Consts::SWOOLE_SERVER_RESTART_NAME,
    ];

    /**
     * 获取所有注册进程
     * @var array
     */
    protected $processes = [];

    /**
     * 当前进程
     * @var ProcessManager
     */
    protected $process;

    /**
     * 进程名称
     * @var
     */
    protected $process_name;

    /**
     * process pid 目录
     * @var
     */
    protected $pid_path;

    /**
     * process pid 文件
     * @var
     */
    protected $pid_file;

    /**
     * process 配置项
     * @var array
     */
    protected $options = [];

    /**
     * 是否守护进程运行
     * @var bool
     */
    protected $daemon = false;

    public function __construct(string $name = null)
    {
        parent::__construct($name);

        $this->output = new ConsoleOutput();
    }

    protected function configure()
    {
        parent::configure(); // TODO: Change the autogenerated stub

        $this
            ->setName(self::$name)// 命令的名称
            ->setDescription('创建一个swoole processor')// 简短描述
            ->setHelp($this->help())// 运行命令时使用 "--help" 选项时的完整命令描述
            ->addArgument('process_name', InputArgument::OPTIONAL, '进程名称')
            ->addArgument('status', InputArgument::OPTIONAL, '进程服务状态')
            ->addOption('daemon', '-d', InputOption::VALUE_NONE, '守护进程')
            ->addOption('list', '-l', InputOption::VALUE_NONE, '查看进程列表');
    }

    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $this->process_name = strtolower($input->getArgument('process_name'));
        $status = strtolower($input->getArgument('status')) ?: Consts::SWOOLE_SERVER_STATUS_NAME;
        $this->daemon = $input->hasParameterOption(['--daemon', '-d'], true) ? true : false;
        if (in_array($status, $this->serverStatusType)) {

            $this->pid_path = app()->getRuntimePath() . '/process';
            if (!file_exists($this->pid_path)) {
                mkdir($this->pid_path, 0755, true);
            }

            $this->pid_file = $this->pid_path . '/' . $this->process_name . '.pid';

            if ($input->hasParameterOption(['--list', '-l']) || empty($this->process_name)) {
                $this->showProcesses($input, $output);
                return 1;
            }

            $this->processes = config()->get('process', []);
            if (!isset($this->processes[$this->process_name])) {
                throw new RuntimeException(sprintf('Process %s cannot found', $this->process_name));
            }
            $config = $this->processes[$this->process_name];
            $processClassName = $config['process'];
            if (! class_exists($processClassName)) {
                throw new RuntimeException(sprintf('Process class "%s" is not found.', $this->process_name));
            }

            $this->options = isset($config['options']) ? (array) $config['options'] : [];
            $this->process = new $processClassName();
            $this->process->name($this->process_name);
            if (! ($this->process instanceof ProcessManager)) {
                throw new RuntimeException('Process must be instance of \ShugaChara\Swoole\Manager\ProcessManager');
            }
            if ($input->hasParameterOption(['--daemon', '-d'])) {
                $this->process->daemon();
            }

            $this->$status();
            return 1;
        }

        throw new Exception($status . ' swoole processor 状态未定义,请通过 --help 查看命令');
    }

    /**
     * 进程状态
     */
    public function status()
    {
        $table = new Table($this->output);
        $info = $this->getProcessInfo($this->process_name);
        $table->setColumnWidth(0, 15);
        $rows = [
            ['name', sprintf('<info>%s</info>', $this->process_name)],
            ['class', sprintf('<info>%s</info>', get_class($this->process))],
            ['status', sprintf('<info>%s</info>', $info[2])],
            ['pid', sprintf('<info>%s</info>', $info[1])],
        ];
        foreach ($this->options as $key => $value) {
            $rows[] = ['options.' . $key, sprintf('<info>%s</info>', $value)];
        }
        $table->setRows($rows);
        $table->setStyle('compact');
        $table->render();
    }

    /**
     * 进程启动
     * @throws \ShugaChara\Swoole\Exceptions\ProcessException
     */
    public function start()
    {
        $pid = $this->process->start();
        file_put_contents($this->pid_file, $pid);
        $this->output->writeln(sprintf('process <info>%s</info> PID: <info>%s</info>', $this->process_name, $pid));
        $this->output->writeln(sprintf('PID: <info>%s</info>', $this->pid_file));

        $this->process->wait(function ($ret) {
            return $this->finish($this->process_name, $ret['pid'], $ret['code'], $ret['signal']);
        });
    }

    /**
     * 进程停止
     */
    public function stop()
    {
        $pid = (int) file_get_contents($this->pid_file);
        if ($this->process->kill($pid, SIGTERM)) {
            $this->output->writeln(sprintf('process %s PID %s is killed', $this->process_name, $pid));
        }
    }

    /**
     * 进程重启
     */
    public function restart()
    {
        $this->stop();
        $this->start();
    }

    /**
     * 查看进程列表
     * @param InputInterface  $input
     * @param OutputInterface $output
     */
    protected function showProcesses(InputInterface $input, OutputInterface $output)
    {
        $rows = [];
        $table = new Table($output);
        $table->setHeaders(['Process', 'Pid', 'Status', 'Start At', 'Runtime']);
        foreach (config()->get('process', []) as $name => $processor) {
            $rows[] = $this->getProcessInfo($name);
        }
        $table->setRows($rows);
        $table->render();
    }

    /**
     * 获取进程详情
     * @param $process_name
     * @return array
     */
    protected function getProcessInfo($process_name)
    {
        $isRunning = false;
        $pid = file_exists($this->pid_file) ? (int) file_get_contents($this->pid_file) : '';
        if (is_numeric($pid)) {
            $isRunning = process_kill($pid, 0);
        }

        return [
            $process_name,
            $isRunning ? $pid : '',
            $isRunning ? '运行中' : '已停止',
            $isRunning ? date('Y-m-d H:i:s', filemtime($this->pid_file)) : '',
            $isRunning ? time() - filemtime($this->pid_file) : '',
        ];
    }

    /**
     * @param     $name
     * @param     $pid
     * @param int $code
     * @param int $signal
     */
    protected function finish($name, $pid, $code = 0, $signal = 0)
    {
        $this->output->writeln(sprintf('process: %s. PID: %s exit. code: %s. signal: %s', $name, $pid, $code, $signal));
    }

    /**
     * 完整命令描述
     * @return string
     */
    public function help(): string
    {
        return '创建一个swoole processor';
    }
}

