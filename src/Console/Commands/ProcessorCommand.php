<?php
// +----------------------------------------------------------------------
// | Created by linshan. 版权所有 @
// +----------------------------------------------------------------------
// | Copyright (c) 2020 All rights reserved.
// +----------------------------------------------------------------------
// | Technology changes the world . Accumulation makes people grow .
// +----------------------------------------------------------------------
// | Author: kaka梦很美 <1099013371@qq.com>
// +----------------------------------------------------------------------

namespace ShugaChara\Framework\Console\Commands;

use Exception;
use RuntimeException;
use ShugaChara\Console\Command;
use ShugaChara\Framework\Contracts\StatusManagerInterface;
use ShugaChara\Framework\Swoole\Server;
use ShugaChara\Swoole\Contracts\ProcessorAbstract;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use swoole_process;

/**
 * Class ProcessorCommand
 * @package ShugaChara\Framework\Console\Commands
 */
class ProcessorCommand extends Command implements StatusManagerInterface
{
    /**
     * @var string
     */
    protected static $name = 'processor';

    /**
     * @var Server
     */
    protected $server;

    /**
     * String replacement placeholder
     * @var string
     */
    private $placeholder = '#placeholder#';

    /**
     * Get all registration processes
     * @var array
     */
    protected $processes = [];

    /**
     * Current process
     * @var ProcessorAbstract
     */
    protected $process;

    /**
     * Process name
     * @var
     */
    protected $process_name;

    /**
     * Process pid dir
     * @var
     */
    protected $pid_path;

    /**
     * Process pid file
     * @var
     */
    protected $pid_file;

    /**
     * Whether the daemon is running
     * @var bool
     */
    protected $daemon = false;

    /**
     * ProcessorCommand constructor.
     * @param string|null $name
     */
    public function __construct(string $name = null)
    {
        parent::__construct($name);
    }

    protected function configure()
    {
        parent::configure(); // TODO: Change the autogenerated stub

        $this
            ->setName(self::$name)
            ->setDescription('Swoole Process Manager')
            ->addArgument('process_name', InputArgument::OPTIONAL, 'Process name')
            ->addArgument('status', InputArgument::OPTIONAL, 'Process service status')
            ->addOption('daemon', '-d', InputOption::VALUE_NONE, 'Daemon')
            ->addOption('list', '-l', InputOption::VALUE_NONE, 'View process list');
    }

    /**
     * @param InputInterface  $input
     * @param OutputInterface $output
     * @return int
     */
    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $this->server = new Server();

        $this->process_name = strtolower($input->getArgument('process_name'));
        $status = strtolower($input->getArgument('status')) ? : self::STATUS_NAME;
        $this->daemon = $input->hasParameterOption(['--daemon', '-d'], true) ? true : false;
        if (in_array($status, self::STATUS_TYPES)) {
            $this->pid_path = $this->server->getProcessPidPath();
            $this->pid_file = $this->server->getProcessPidFile($this->process_name ? : $this->placeholder);

            if ($input->hasParameterOption(['--list', '-l']) || empty($this->process_name)) {
                $this->showProcesses($input, $output);
                return 1;
            }

            $this->processes = fnc()->c()->get('swoole.processor.fpm_list', []);
            if (! isset($this->processes[$this->process_name])) {
                throw new RuntimeException(sprintf('Process %s cannot found', $this->process_name));
            }
            $processClassName = $this->processes[$this->process_name];
            if (! class_exists($processClassName)) {
                throw new RuntimeException(sprintf('Process class "%s" is not found.', $this->process_name));
            }

            $this->process = new $processClassName($this->process_name);
            if (! ($this->process instanceof ProcessorAbstract)) {
                throw new RuntimeException('Process must be instance of \ShugaChara\Swoole\Manager\Processor');
            }
            if ($input->hasParameterOption(['--daemon', '-d'])) {
                $this->process->getProcessor()->daemon();
            }

            $this->$status();

            return 1;
        }

        throw new Exception($status . ' | the service status is undefined, please check the command via --help');
    }

    /**
     * @return mixed|void
     */
    public function status()
    {
        // TODO: Implement status() method.

        $info = $this->getProcessInfo($this->process_name);
        $rows[] = [
            $this->process_name,
            get_class($this->process),
            $info[2],
            $info[1]
        ];

        $this->table(
            [
                'NAME', 'CLASS', 'STATUS', 'PID'
            ],
            $rows
        );
    }

    /**
     * @return mixed|void
     * @throws \Exception
     */
    public function start()
    {
        // TODO: Implement start() method.

        $pid = $this->process->getProcessor()->start();
        file_put_contents($this->pid_file, $pid);
        $this->info(sprintf('process <info>%s</info> PID: <info>%s</info>', $this->process_name, $pid));
        $this->info(sprintf('PID: <info>%s</info>', $this->pid_file));
        $this->process->getProcessor()->wait(true, function ($ret) {
            $this->info(sprintf('process: %s. PID: %s exit. code: %s. signal: %s', $this->process_name, $ret['pid'], $ret['code'], $ret['signal']));
        });
    }

    /**
     * @return mixed|void
     */
    public function stop()
    {
        // TODO: Implement stop() method.

        $pid = (int) file_get_contents($this->pid_file);
        if ($this->process->getProcessor()->kill($pid, SIGTERM)) {
            $this->info(sprintf('process %s PID %s is killed', $this->process_name, $pid));
        }
    }

    /**
     * @return mixed|void
     */
    public function reload()
    {
        // TODO: Implement reload() method.
    }

    /**
     * @return mixed|void
     */
    public function restart()
    {
        // TODO: Implement restart() method.

        $this->stop();

        $this->start();
    }

    /**
     * View process list
     */
    protected function showProcesses()
    {
        $rows = [];
        foreach (fnc()->c()->get('swoole.processor.fpm_list', []) as $name => $processor) {
            $rows[] = $this->getProcessInfo($name);
        }

        $this->table(
            [
                'PROCESS', 'PID', 'STATUS', 'START AT', 'RUNTIME'
            ],
            $rows
        );
    }

    /**
     * Get process details
     * @param $process_name
     * @return array
     */
    protected function getProcessInfo($process_name)
    {
        $isRunning = false;
        $pid_file = str_replace($this->placeholder, $process_name, $this->pid_file);
        $pid = file_exists($pid_file) ? (int) file_get_contents($pid_file) : '';
        if (is_numeric($pid)) {
            $isRunning = swoole_process::kill($pid, 0);
        }

        return [
            $process_name,
            $isRunning ? $pid : '',
            $isRunning ? 'Running' : 'Stopped',
            $isRunning ? date('Y-m-d H:i:s', filemtime($pid_file)) : '',
            $isRunning ? time() - filemtime($pid_file) : '',
        ];
    }
}

