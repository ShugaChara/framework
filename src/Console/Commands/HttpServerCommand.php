<?php
// +----------------------------------------------------------------------
// | Created by linshan. 版权所有 @
// +----------------------------------------------------------------------
// | Copyright (c) 2020 All rights reserved.
// +----------------------------------------------------------------------
// | Technology changes the world . Accumulation makes people grow .
// +----------------------------------------------------------------------
// | Author: kaka梦很美 <1099013371@qq.com>
// +----------------------------------------------------------------------

namespace ShugaChara\Framework\Console\Commands;

use Exception;
use ShugaChara\Console\Command;
use ShugaChara\Core\Helpers;
use ShugaChara\Framework\Contracts\StatusManagerInterface;
use ShugaChara\Framework\Traits\Swoole;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;

/**
 * Class HttpServerCommand
 * @package ShugaChara\Framework\Console\Commands
 */
class HttpServerCommand extends Command implements StatusManagerInterface
{
    use Swoole;

    protected static $name = 'http';

    protected function configure()
    {
        parent::configure(); // TODO: Change the autogenerated stub

        $this
            ->setName(self::$name)  // 命令的名称
            ->setDescription('创建一个swoole ' . self::$name . ' 服务器')  // 简短描述
            ->addArgument('status', InputArgument::OPTIONAL, '服务状态')
            ->addOption('daemon', 'd', InputOption::VALUE_NONE, '服务守护进程')
            ->addOption('force', '', InputOption::VALUE_NONE, '是否强制终止进程');
    }

    /**
     * @param InputInterface  $input
     * @param OutputInterface $output
     * @return int
     * @throws Exception
     */
    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $status = strtolower($input->getArgument('status')) ? : self::STATUS_NAME;
        $this->daemon = $input->hasParameterOption(['--daemon', '-d'], true) ? true : false;
        $this->force = $input->hasParameterOption(['--force'], true) ? true : false;
        if (in_array($status, self::STATUS_TYPES)) {
            // 服务配置
            if (! $this->getConfig(SWOOLE_HTTP_SERVER)) {
                throw new Exception('请完成swoole配置才能启动服务');
            }

            // 服务守护进程
            if ($this->daemon) {
                $this->setDaemonize(SWOOLE_HTTP_SERVER, $this->daemon);
            }

            $this->$status();

            return 1;
        }

        throw new Exception($status . ' 服务状态未定义,请通过 --help 查看命令');
    }

    public function status()
    {
        // TODO: Implement status() method.

        if ($this->getServerStatus(SWOOLE_HTTP_SERVER)) {
            $this->getSwooleServerStatusInfo(SWOOLE_HTTP_SERVER);
            return $this->alert(SWOOLE_HTTP_SERVER . ' 服务已启动');
        }

        return $this->alert(SWOOLE_HTTP_SERVER . ' 服务未启动');
    }

    public function start()
    {
        // TODO: Implement start() method.

        $config = $this->getConfig(SWOOLE_HTTP_SERVER);

        // 创建服务器
        $this->serverManager()->createServer(
            SWOOLE_HTTP_SERVER,
            Helpers::array_get($config, 'port'),
            Helpers::array_get($config, 'host', '0.0.0.0'),
            Helpers::array_get($config, 'setting', [])
        );

        // 注册默认回调事件
        $this->serverManager()->registerDefaultCallback(
            $this->serverManager()->getServer(),
            SWOOLE_HTTP_SERVER
        );

        // hook 全局 mainSwooleServerEventsCreate 事件
        // ...

        // pid 进程文件
        $pidFile = isset($config['pid_file']) ? $config['pid_file']  : app()->getRuntimePath() . '/tmp/' . str_replace(' ', '-', SWOOLE_HTTP_SERVER) . '.pid';
        if (! file_exists($dir = dirname($pidFile))) {
            mkdir($dir, 0755, true);
        }

        // 主进程命名
        process_rename($this->getMasterProcessName(SWOOLE_HTTP_SERVER));

        $this->info('主服务 Master : ' . SWOOLE_HTTP_SERVER);
        $this->info('服务监听地址 : ' . $config['host']);
        $this->info('服务监听端口 : ' . $config['port']);

        $ips = swoole_get_local_ip();
        foreach ($ips as $eth => $val){
            $this->info('ip@' . $eth . $val);
        }

        foreach (Helpers::array_get($config, 'setting', []) as $key => $datum){
            $this->info($key . " : " . (string)$datum);
        }

        $user = Helpers::array_get($config, 'setting.user', get_current_user());
        $this->info('运行服务用户 : ' . $user);
        $this->info('服务守护进程状态 : ' . $this->isDaemonize(SWOOLE_HTTP_SERVER));
        $this->info('swoole 服务运行版本 : ' . SWOOLE_VERSION);
        $this->info('php 运行版本 : ' . phpversion());
        $this->info('czphp 框架运行版本 : ' . app()->getAppVersion());
        $this->info('服务环境 : ' . environment());

        // 注入 swoole
        container()->add('swoole', $this->serverManager()->getServer());

        // 注入 swoole 事件分发器
        container()->add('swoole_event_dispatcher', $this->serverManager()->getEventsRegister());

        // 注册回调事件
        $this->serverManager()->start();
    }

    public function stop()
    {
        // TODO: Implement stop() method.
    }

    public function reload()
    {
        // TODO: Implement reload() method.
    }

    public function restart()
    {
        // TODO: Implement restart() method.
    }
}

