<?php
// +----------------------------------------------------------------------
// | Created by linshan. 版权所有 @
// +----------------------------------------------------------------------
// | Copyright (c) 2020 All rights reserved.
// +----------------------------------------------------------------------
// | Technology changes the world . Accumulation makes people grow .
// +----------------------------------------------------------------------
// | Author: kaka梦很美 <1099013371@qq.com>
// +----------------------------------------------------------------------

namespace ShugaChara\Framework\Console\Commands;

use Exception;
use ShugaChara\Console\Command;
use ShugaChara\Core\Helpers;
use ShugaChara\Framework\Contracts\StatusManagerInterface;
use ShugaChara\Framework\Traits\Swoole;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use swoole_process;

/**
 * Class HttpServerCommand
 * @package ShugaChara\Framework\Console\Commands
 */
class HttpServerCommand extends Command implements StatusManagerInterface
{
    use Swoole;

    protected static $name = 'http';

    /**
     * 是否强制执行
     * @var bool
     */
    protected $force = false;

    protected function configure()
    {
        parent::configure(); // TODO: Change the autogenerated stub

        $this
            ->setName(self::$name)  // 命令的名称
            ->setDescription('创建一个swoole ' . self::$name . ' 服务器')  // 简短描述
            ->addArgument('status', InputArgument::OPTIONAL, '服务状态')
            ->addOption('daemon', 'd', InputOption::VALUE_NONE, '服务守护进程')
            ->addOption('force', '', InputOption::VALUE_NONE, '是否强制终止进程');
    }

    /**
     * @param InputInterface  $input
     * @param OutputInterface $output
     * @return int
     * @throws Exception
     */
    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $status = strtolower($input->getArgument('status')) ? : self::STATUS_NAME;
        $this->daemon = $input->hasParameterOption(['--daemon', '-d'], true) ? true : false;
        $this->force = $input->hasParameterOption(['--force'], true) ? true : false;
        if (in_array($status, self::STATUS_TYPES)) {
            // 服务配置
            if (! $this->getConfig(SWOOLE_HTTP_SERVER)) {
                throw new Exception('请完成swoole配置才能启动服务');
            }

            // 服务守护进程
            if ($this->daemon) {
                $this->setDaemonize(SWOOLE_HTTP_SERVER, $this->daemon);
            }

            $this->$status();

            return 1;
        }

        throw new Exception($status . ' 服务状态未定义,请通过 --help 查看命令');
    }

    public function status()
    {
        // TODO: Implement status() method.

        if ($this->getServerStatus(SWOOLE_HTTP_SERVER)) {
            $this->getSwooleServerStatusInfo(SWOOLE_HTTP_SERVER);
            return $this->alert(SWOOLE_HTTP_SERVER . ' 服务已启动');
        }

        return $this->alert(SWOOLE_HTTP_SERVER . ' 服务未启动');
    }

    public function start()
    {
        // TODO: Implement start() method.

        $config = $this->getConfig(SWOOLE_HTTP_SERVER);

        // 创建服务器
        $this->serverManager()->createServer(
            SWOOLE_HTTP_SERVER,
            Helpers::array_get($config, 'port'),
            Helpers::array_get($config, 'host', '0.0.0.0'),
            Helpers::array_get($config, 'setting', [])
        );

        // 注册默认回调事件
        $this->serverManager()->registerDefaultCallback(
            $this->serverManager()->getServer(),
            SWOOLE_HTTP_SERVER
        );

        // hook 全局 mainSwooleServerEventsCreate 事件
        // ...

        // pid 进程文件
        $pidFile = isset($config['pid_file']) ? $config['pid_file']  : app()->getRuntimePath() . '/tmp/' . str_replace(' ', '-', SWOOLE_HTTP_SERVER) . '.pid';
        if (! file_exists($dir = dirname($pidFile))) {
            mkdir($dir, 0755, true);
        }

        // 主进程命名
        process_rename($this->getMasterProcessName(SWOOLE_HTTP_SERVER));

        // 获取当前机器的所有网络接口的IP地址
        $swooleGetLocalIp = '';
        $ips = swoole_get_local_ip();
        foreach ($ips as $eth => $val){
            $swooleGetLocalIp .= 'ip@' . $eth . $val . ', ';
        }

        $tableData = [
            [
                '主服务 Master', SWOOLE_HTTP_SERVER
            ],
            [
                '服务监听地址', $config['host']
            ],
            [
                '服务监听端口', $config['port']
            ],
            [
                '当前机器的所有网络接口的IP地址', $swooleGetLocalIp
            ],
        ];

        foreach (Helpers::array_get($config, 'setting', []) as $key => $datum) {
            $countSetting = count($tableData);
            $tableData[$countSetting][0] = $key;
            $tableData[$countSetting][1] = (string) $datum;
        }

        $user = Helpers::array_get($config, 'setting.user', get_current_user());
        $tableData[] = ['运行服务用户', $user];
        $tableData[] = ['服务守护进程状态', $this->isDaemonize(SWOOLE_HTTP_SERVER) ? '是' : '否'];
        $tableData[] = ['php 运行版本', phpversion()];
        $tableData[] = ['swoole 服务运行版本', SWOOLE_VERSION];
        $tableData[] = ['czphp 框架运行版本', app()->getAppVersion()];
        $tableData[] = ['服务环境', environment()];

        $this->table(
            [
                'NAME', 'VALUE'
            ],
            $tableData
        );

        // 注入 swoole
        container()->add('swoole', $this->serverManager()->getServer());

        // 注入 swoole 事件分发器
        container()->add('swoole_event_dispatcher', $this->serverManager()->getEventsRegister());

        // 注册回调事件
        $this->serverManager()->start();
    }

    public function stop()
    {
        // TODO: Implement stop() method.

        $config = $this->getConfig(SWOOLE_HTTP_SERVER);

        $pidFile = Helpers::array_get($config, 'setting.pid_file', '');
        if (file_exists($pidFile)) {
            $pid = intval(file_get_contents($pidFile));
            if (! swoole_process::kill($pid, 0)) {
                return $this->error("服务PID :{$pid} 不存在 ");
            }

            $this->force ? swoole_process::kill($pid, SIGKILL) : swoole_process::kill($pid);

            // 等待5秒
            $time = time();
            while (true) {
                usleep(1000);
                if (! swoole_process::kill($pid, 0)) {
                    if (is_file($pidFile)) {
                        unlink($pidFile);
                    }
                    return $this->alert('服务停止时间: ' . date('Y-m-d H:i:s'));
                    break;
                } else {
                    if (time() - $time > 15) {
                        return $this->error('服务停止失败 , try : 请尝试强制停止服务');
                        break;
                    }
                }
            }
            return $this->error('服务停止失败');
        } else {
            return $this->warn('服务PID文件不存在, 请检查是否以守护程序模式运行!');
        }
    }

    public function reload()
    {
        // TODO: Implement reload() method.

        $config = $this->getConfig(SWOOLE_HTTP_SERVER);

        $pidFile = Helpers::array_get($config, 'setting.pid_file', '');
        if (file_exists($pidFile)) {
            Helpers::opCacheClear();
            $pid = file_get_contents($pidFile);
            if (! swoole_process::kill($pid, 0)) {
                return $this->error("服务PID :{$pid} 不存在 ");
            }
            swoole_process::kill($pid, SIGUSR1);
            return $this->alert('服务PID: ' . $pid . ' 向所有worker进程发送通知重载服务,命令执行于 ' . date('Y-m-d H:i:s'));
        } else {
            return $this->error('服务PID文件不存在, 请检查是否以守护程序模式运行!');
        }
    }

    public function restart()
    {
        // TODO: Implement restart() method.

        $this->stop();

        $this->start();
    }
}

