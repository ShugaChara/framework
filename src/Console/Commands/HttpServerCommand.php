<?php
// +----------------------------------------------------------------------
// | Created by linshan. 版权所有 @
// +----------------------------------------------------------------------
// | Copyright (c) 2019 All rights reserved.
// +----------------------------------------------------------------------
// | Technology changes the world . Accumulation makes people grow .
// +----------------------------------------------------------------------
// | Author: kaka梦很美 <1099013371@qq.com>
// +----------------------------------------------------------------------

namespace ShugaChara\Framework\Console\Commands;

use Exception;
use ShugaChara\Core\Helpers;
use ShugaChara\Framework\Constant\Consts;
use ShugaChara\Framework\Swoole\SwooleServerManager;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;

/**
 * Class HttpServerCommand
 * @package ShugaChara\Framework\Console\Commands
 */
class HttpServerCommand extends BaseServerCommand
{
    protected static $name = 'http';

    /**
     * 服务管理
     * @var SwooleServerManager
     */
    protected $swooleServerManager;

    /**
     * 服务配置
     * @var array
     */
    protected $config = [];

    protected function configure()
    {
        parent::configure(); // TODO: Change the autogenerated stub

        $this
            ->setName(self::$name)  // 命令的名称
            ->setDescription('创建一个swoole ' . self::$name . ' 服务器')  // 简短描述
            ->setHelp($this->help())  // 运行命令时使用 "--help" 选项时的完整命令描述
            ->addArgument('status', InputArgument::OPTIONAL, '服务状态')
            ->addOption('daemon', 'd', InputOption::VALUE_NONE, '服务守护进程');
    }

    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $status = strtolower($input->getArgument('status')) ?? Consts::SWOOLE_SERVER_STATUS_NAME;
        $daemon = $input->hasParameterOption(['--daemon', '-d'], true) ? true : false;
        if (in_array($status, $this->serverStatusType)) {
            $this->swooleServerManager = SwooleServerManager::getInstance();
            if (! $this->config = config()->get('swoole.' . Consts::SWOOLE_SERVER_HTTP, [])) {
                throw new Exception('请完成swoole配置才能启动服务');
            }
            if ($daemon) {
                $this->config['setting']['daemonize'] = $daemon;
            }
            $this->$status();
            return 1;
        }

        throw new Exception($status . ' 服务状态未定义,请通过 --help 查看命令');
    }

    public function getSwooleServerManager(): SwooleServerManager
    {
        return $this->swooleServerManager;
    }

    public function status()
    {
        // TODO: Implement status() method.

    }

    public function start()
    {
        // TODO: Implement start() method.

        $this->getSwooleServerManager()->createServer(
            Consts::SWOOLE_SERVER_HTTP,
            $this->config['port'],
            $this->config['host'],
            $this->config['setting']
        );

        $this->getSwooleServerManager()->registerDefaultCallback(
            $this->getSwooleServerManager()->getServer(),
            Consts::SWOOLE_SERVER_HTTP
        );

        $pidFile = isset($this->config['pid_file']) ? $this->config['pid_file']  : '/tmp/' . str_replace(' ', '-', Consts::SWOOLE_SERVER_HTTP) . '.pid';
        if (! file_exists($dir = dirname($pidFile))) {
            mkdir($dir, 0755, true);
        }

        // 主进程命名
        process_rename(Consts::SWOOLE_SERVER_HTTP . ' master');

        $this->output->writeln('main server : ' . Consts::SWOOLE_SERVER_HTTP . PHP_EOL);
        $this->output->writeln('listen address : ' . $this->config['host'] . PHP_EOL);
        $this->output->writeln('listen port : ' . $this->config['port'] . PHP_EOL);

        $ips = swoole_get_local_ip();
        foreach ($ips as $eth => $val){
            $this->output->writeln('ip@' . $eth . $val) . PHP_EOL;
        }

        foreach ($this->config['setting'] as $key => $datum){
            $this->output->writeln($key . (string)$datum) . PHP_EOL;
        }

        $user = Helpers::array_get($this->config, 'setting.user', get_current_user());
        $this->output->writeln('run at user : ' . $user) . PHP_EOL;
        $this->output->writeln('daemonize : ' . Helpers::array_get($this->config, 'daemonize', false)) . PHP_EOL;
        $this->output->writeln('swoole version : ' . phpversion('swoole')) . PHP_EOL;
        $this->output->writeln('php version : ' . phpversion()) . PHP_EOL;
        $this->output->writeln('czphp app swoole : ' . app()->getAppVersion()) . PHP_EOL;
        $this->output->writeln('environment : ' . environment()) . PHP_EOL;
        $this->output->writeln('temp dir : ' . app()->getRuntimePath()) . PHP_EOL;
        $this->output->writeln('log dir : ' . app()->getRuntimePath()) . PHP_EOL;

        // 注册回调事件
        $this->getSwooleServerManager()->start();
    }

    public function stop()
    {
        // TODO: Implement stop() method.
    }

    public function reload()
    {
        // TODO: Implement reload() method.
    }

    public function restart()
    {
        // TODO: Implement restart() method.
    }

    /**
     * 完整命令描述
     * @return string
     */
    public function help(): string
    {
        return '创建一个http服务器';
    }
}

