<?php
// +----------------------------------------------------------------------
// | Created by linshan. 版权所有 @
// +----------------------------------------------------------------------
// | Copyright (c) 2019 All rights reserved.
// +----------------------------------------------------------------------
// | Technology changes the world . Accumulation makes people grow .
// +----------------------------------------------------------------------
// | Author: kaka梦很美 <1099013371@qq.com>
// +----------------------------------------------------------------------

namespace ShugaChara\Framework\Console\Commands;

use Exception;
use ShugaChara\Framework\Constant\Consts;
use ShugaChara\Framework\Server\SwooleServer;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;

/**
 * Class HttpServerCommand
 * @package ShugaChara\Framework\Console\Commands
 */
class HttpServerCommand extends BaseServerCommand
{
    protected static $name = 'http';

    protected function configure()
    {
        parent::configure(); // TODO: Change the autogenerated stub

        $this
            ->setName(self::$name)  // 命令的名称
            ->setDescription('创建一个swoole ' . self::$name . ' 服务器')  // 简短描述
            ->setHelp($this->help())  // 运行命令时使用 "--help" 选项时的完整命令描述
            ->addArgument('handle', InputArgument::OPTIONAL, '服务状态')
            ->addOption('daemon', 'd', InputOption::VALUE_NONE, '服务守护进程');
    }

    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $handle = strtolower($input->getArgument('handle')) ?? Consts::SWOOLE_SERVER_STATUS_NAME;
        $daemon = $input->hasParameterOption(['--daemon', '-d'], true) ? true : false;
        if (in_array($handle, $this->handleType)) {
            $serverConfig = config()->get('swoole.http') ?? [];
            if ((in_array($handle, [Consts::SWOOLE_SERVER_START_NAME, Consts::SWOOLE_SERVER_RESTART_NAME]))
                && isset($serverConfig['options']['daemonize'])
                && $daemon
            ) {
                $serverConfig['options']['daemonize'] = $daemon;
            }

            $this->server = SwooleServer::getInstance()->initAppSwooleServer(
                Consts::SWOOLE_SERVER_HTTP,
                $serverConfig,
                $output
            );

            $this->$handle();

            return 1;
        }

        throw new Exception($handle . ' 服务状态未定义,请通过 --help 查看命令');
    }

    /**
     * @return array|mixed
     */
    public function status()
    {
        // TODO: Implement status() method.

        $swooleServer = $this->getSwooleServer();
        $swooleServerStatus = $swooleServer->status() ? true : false;

        return [$swooleServer, $swooleServerStatus];
    }

    /**
     * @return bool|mixed
     */
    public function start()
    {
        // TODO: Implement start() method.

        list($swooleServer, $swooleServerStatus) = $this->status();
        if ($swooleServerStatus) {
            return false;
        }

        return $swooleServer->start();
    }

    /**
     * @return bool|mixed
     */
    public function stop()
    {
        // TODO: Implement stop() method.

        list($swooleServer, $swooleServerStatus) = $this->status();
        if (! $swooleServerStatus) {
            return false;
        }

        return $swooleServer->stop();
    }

    /**
     * @return bool|mixed
     */
    public function reload()
    {
        // TODO: Implement reload() method.

        list($swooleServer, $swooleServerStatus) = $this->status();
        if (! $swooleServerStatus) {
            return false;
        }

        return $swooleServer->reload();
    }

    /**
     * @return bool|mixed
     */
    public function restart()
    {
        // TODO: Implement restart() method.

        list($swooleServer, $swooleServerStatus) = $this->status();
        if (! $swooleServerStatus) {
            return false;
        }

        return $swooleServer->restart();
    }

    /**
     * 完整命令描述
     * @return string
     */
    public function help(): string
    {
        return '创建一个http服务器';
    }
}

