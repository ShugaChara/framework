<?php
// +----------------------------------------------------------------------
// | Created by linshan. 版权所有 @
// +----------------------------------------------------------------------
// | Copyright (c) 2020 All rights reserved.
// +----------------------------------------------------------------------
// | Technology changes the world . Accumulation makes people grow .
// +----------------------------------------------------------------------
// | Author: kaka梦很美 <1099013371@qq.com>
// +----------------------------------------------------------------------

namespace ShugaChara\Framework\Contracts;

use Exception;
use ShugaChara\Framework\Swoole\Server;
use ShugaChara\Framework\Traits\Swoole;
use ShugaChara\Framework\Traits\SwooleCommand;
use swoole_server;
use ShugaChara\Framework\Console\Command;
use ShugaChara\Swoole\SwooleHelper;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;

/**
 * Class BaseServerCommandAbstract
 * @package ShugaChara\Framework\Contracts
 */
abstract class BaseServerCommandAbstract extends Command implements StatusManagerInterface
{
    use Swoole, SwooleCommand;

    /**
     * Console configure
     */
    protected function configure()
    {
        parent::configure(); // TODO: Change the autogenerated stub

        $this->addArgument('status', InputArgument::OPTIONAL, 'Service status');
        $this->addOption('daemon', 'd', InputOption::VALUE_NONE, 'Service daemon');
    }

    /**
     * 初始化服务
     * @param                $server_name
     * @param InputInterface $input
     * @return int
     * @throws Exception
     */
    protected function initServer($server_name, InputInterface $input)
    {
        // 注册服务器命令行通道
        container()->add('server_channel', $this);

        $this->setServer(new Server());
        $this->setServerName($server_name);
        $this->setServerConfigName($server_name);

        $status = strtolower($input->getArgument('status')) ? : static::STATUS_NAME;
        $daemon = $input->hasParameterOption(['--daemon', '-d'], true) ? true : false;
        if (! in_array($status, self::STATUS_TYPES)) {
            throw new Exception($status . ' 服务状态未定义，请通过 --help 检查命令');
        }

        // 设置服务守护进程
        if ($daemon) {
            $this->setDaemonize($daemon);
        }

        $this->$status();
    }

    /**
     * 获取服务状态
     * @return mixed|void
     * @throws Exception
     */
    public function status()
    {
        // TODO: Implement status() method.

        if (! $this->getServerStatus()) {
            throw new Exception($this->getServerConfigName() . ' 服务未启动');
        }

        // 获取服务状态详情
        $this->getSwooleServerStatusInfo();

        return $this->writelnBlock($this->getServerConfigName() . ' 服务已启动');
    }

    /**
     * 服务启动
     * @return mixed|void
     * @throws Exception
     */
    public function start()
    {
        // TODO: Implement start() method.

        // 创建服务
        $this->getServer()->createServer(
            $this->getServerName(),
            $this->getServerConfig('port'),
            $this->getServerConfig('host', '0.0.0.0'),
            $this->getServerConfig('setting', [])
        );

        // 注册默认的回调事件
        $this->getServer()->registerDefaultCallback(
            $this->getServer()->getSwooleServer(),
            $this->getServerName()
        );

        // 注册当前类回调事件
        $this->getServer()->registerClassEvents($this, $this->getServer());

        // 加载进程
        $this->getServer()->loadProcessor();

        // 加载监听
        $this->getServer()->loadListener();

        // 注册全局 Hook mainSwooleServerEventsCreate 事件
        $this->handleMainSwooleServerEventsCreate();

        // 进程 PID 文件
        $this->createSwooleSettingPidDir();

        // 设置主进程名称
        SwooleHelper::setProcessRename($this->getMasterProcessName());

        // 打印服务信息
        $this->serverInfo();

        // 服务启动
        $this->getServer()->start();
    }

    /**
     * 服务停止
     * @return mixed|void
     * @throws Exception
     */
    public function stop()
    {
        // TODO: Implement stop() method.

        $this->serverStop();
    }

    /**
     * 服务平滑加载
     * @return mixed|void
     * @throws Exception
     */
    public function reload()
    {
        // TODO: Implement reload() method.

        $this->serverReload();
    }

    /**
     * 服务重启
     * @return mixed|void
     * @throws Exception
     */
    public function restart()
    {
        // TODO: Implement restart() method.

        $this->stop();

        $this->start();
    }

    /**
     * 启动后在主进程（master）的主线程中调用此函数
     * @param swoole_server $server
     * @throws Exception
     */
    public function onStart(swoole_server $server)
    {
        $listeners = conf()->get('swoole.listeners', []);
        foreach ($listeners as $listener) {
            switch ($listener['sock_type']) {
                case SWOOLE_SOCK_UDP:
                    $sockType = 'udp';
                    break;
                case SWOOLE_SOCK_TCP:
                    $sockType = 'tcp';
                    break;
                default:
                    $sockType = 'sock_type:' . $listener['sock_type'];
            }

            $this->getIO()->title('<ft-red-bold>' . sprintf('Listen : %s://%s:%s', $sockType, $listener['host'], $listener['port']) . '</ft-red-bold>');
        }
    }

    /**
     * 当管理进程启动时触发此事件
     * @param swoole_server $server
     * @throws Exception
     */
    public function onManagerStart(swoole_server $server)
    {
        SwooleHelper::setProcessRename($this->getServerConfigName() . '.manager');
        $this->writelnBlock(sprintf('%s 服务管理 PID [%s] 已经启动', $this->getServerConfigName(), $server->manager_pid));
    }

    /**
     * 事件在 Worker 进程 / Task 进程启动时发生，这里创建的对象可以在进程生命周期内使用
     * @param swoole_server $server
     * @param               $workerId
     */
    public function onWorkerStart(swoole_server $server, $workerId)
    {
        $worker_name = $server->taskworker ? 'task' : 'worker';
        $tag = '%s';
        switch ($worker_name) {
            case 'task':
                $tag = '<bf-yellow>%s</bf-yellow>';
                break;
            case 'worker':
                $tag = '<bf-blue>%s</bf-blue>';
                break;
            default:
        }
        SwooleHelper::setProcessRename($this->getServerConfigName() . '.' . $worker_name . '.' . $workerId);
        $this->getIO()->writeln(sprintf('%s 服务 ' . $tag . ' <ft-blue-bold>[%s]</ft-blue-bold> 已经启动 [%s]', $this->getServerConfigName(), ucfirst($worker_name), $server->worker_pid, $workerId));
    }
}