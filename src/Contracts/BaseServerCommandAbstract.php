<?php
// +----------------------------------------------------------------------
// | Created by linshan. 版权所有 @
// +----------------------------------------------------------------------
// | Copyright (c) 2020 All rights reserved.
// +----------------------------------------------------------------------
// | Technology changes the world . Accumulation makes people grow .
// +----------------------------------------------------------------------
// | Author: kaka梦很美 <1099013371@qq.com>
// +----------------------------------------------------------------------

namespace ShugaChara\Framework\Contracts;

use Exception;
use ShugaChara\Core\Utils\Helper\PhpHelper;
use Throwable;
use ReflectionClass;
use swoole_process;
use swoole_server;
use ShugaChara\Core\Utils\Helper\ArrayHelper;
use ShugaChara\Framework\Console\Command;
use ShugaChara\Framework\Swoole\Server;
use ShugaChara\Swoole\SwooleHelper;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;

/**
 * Class BaseServerCommandAbstract
 * @package ShugaChara\Framework\Contracts
 */
abstract class BaseServerCommandAbstract extends Command implements StatusManagerInterface
{
    /**
     * Server object
     * @var
     */
    protected $server;

    /**
     * Server name
     * @var
     */
    protected $serverName;

    /**
     * Server config
     * @var
     */
    protected $serverConfig;

    /**
     * Console configure
     */
    protected function configure()
    {
        parent::configure(); // TODO: Change the autogenerated stub

        $this->addArgument('status', InputArgument::OPTIONAL, 'Service status');
        $this->addOption('daemon', 'd', InputOption::VALUE_NONE, 'Service daemon');
    }

    /**
     * Init service
     * @param                $server_name
     * @param InputInterface $input
     * @return int
     * @throws Exception
     */
    protected function initServer($server_name, InputInterface $input)
    {
        // Register server command line channel
        container()->add('server_channel', $this);

        // Set server name
        $this->setServerName($server_name);

        $status = strtolower($input->getArgument('status')) ? : static::STATUS_NAME;
        $daemon = $input->hasParameterOption(['--daemon', '-d'], true) ? true : false;
        if (! in_array($status, self::STATUS_TYPES)) {
            throw new Exception($status . ' | the service status is undefined, please check the command via --help');
        }

        // Service daemon
        if ($daemon) {
            $this->setDaemonize($daemon);
        }

        $this->$status();
    }

    /**
     * Get service status
     * @return mixed|void
     * @throws Exception
     */
    public function status()
    {
        // TODO: Implement status() method.

        if (! $this->getServerStatus()) {
            throw new Exception($this->getServerName() . ' service not started');
        }

        // Get server status info
        $this->getSwooleServerStatusInfo();

        return $this->info($this->getServerName() . ' service started' . PHP_EOL);
    }

    /**
     * Service start
     * @return mixed|void
     * @throws Exception
     */
    public function start()
    {
        // TODO: Implement start() method.

        // Create server
        $this->getServer()->createServer(
            $this->getServerName(),
            $this->getServerConfig('port'),
            $this->getServerConfig('host', '0.0.0.0'),
            $this->getServerConfig('setting', [])
        );

        // Register the default callback event
        $this->getServer()->registerDefaultCallback(
            $this->getServer()->getServer(),
            $this->getServerName()
        );

        // Register current events
        $selfEvents = get_class_methods($this);
        foreach ($selfEvents as $event) {
            if ('on' != substr($event, 0, 2)) {
                continue;
            }

            $this->getServer()->getEventsRegister()->addEvent(lcfirst(substr($event, 2)), [$this, $event]);
        }

        // Loading process
        $this->getServer()->loadProcessor();

        // Loading listener
        $this->getServer()->loadListener();

        // Hook global mainSwooleServerEventsCreate event
        $this->handleMainSwooleServerEventsCreate();

        // Pid process file
        $pidFile = $this->getSwooleSettingPidFile();
        if (! file_exists($dir = dirname($pidFile))) {
            mkdir($dir, 0755, true);
        }

        // Main process naming
        SwooleHelper::setProcessRename($this->getMasterProcessName());

        // Get the IP addresses of all network interfaces of the current machine
        $swooleGetLocalIp = '';
        $ips = swoole_get_local_ip();
        foreach ($ips as $eth => $val){
            $swooleGetLocalIp .= 'ip@' . $eth . $val . ', ';
        }

        $this->info(fnc()->app()->getLogo());

        $tableData = [
            [
                'Main service name', $this->getServerName()
            ],
            [
                'Service monitoring address', $this->getServerConfig('host', '0.0.0.0')
            ],
            [
                'Service listening port', $this->getServerConfig('port')
            ],
            [
                'IP addresses of all network interfaces of the current machine', $swooleGetLocalIp
            ],
        ];

        foreach ($this->getServerConfig('setting', []) as $key => $datum) {
            $countSetting = count($tableData);
            $tableData[$countSetting][0] = $key;
            $tableData[$countSetting][1] = (string) $datum;
        }

        $tableData[] = ['Running service user', $this->getServerConfig('setting.user', get_current_user())];
        $tableData[] = ['Service daemon status', $this->isDaemonize($this->getServerName()) ? 'YES' : 'NO'];
        $tableData[] = ['Framework running name', fnc()->app()->getName()];
        $tableData[] = ['Framework running version', fnc()->app()->getVersion()];
        $tableData[] = ['PHP running version', phpversion()];
        $tableData[] = ['Swoole service running version', SWOOLE_VERSION];

        $this->table(
            [
                'NAME', 'VALUE'
            ],
            $tableData
        );

        $this->info(PHP_EOL);

        // Register callback event
        $this->getServer()->start();
    }

    /**
     * Service stop
     * @return mixed|void
     * @throws Exception
     */
    public function stop()
    {
        // TODO: Implement stop() method.

        $pidFile = $this->getSwooleSettingPidFile();
        if (file_exists($pidFile)) {
            $pid = intval(file_get_contents($pidFile));
            if (! swoole_process::kill($pid, 0)) {
                throw new Exception("Service PID : {$pid} does not exist ");
            }

            swoole_process::kill($pid);

            // Wait 5 seconds
            $time = time();
            while (true) {
                usleep(1000);
                if (! swoole_process::kill($pid, 0)) {
                    if (is_file($pidFile)) {
                        unlink($pidFile);
                    }
                    return $this->info('Service stop time : ' . date('Y-m-d H:i:s') . PHP_EOL);
                    break;
                } else {
                    if (time() - $time > 15) {
                        throw new Exception('Service stop failed , try : please try to force stop the service');
                        break;
                    }
                }
            }

            throw new Exception('Service stop failed');
        }

        throw new Exception('Service PID file does not exist, please check if it is running in daemon mode!');
    }

    /**
     * Service reload
     * @return mixed|void
     * @throws Exception
     */
    public function reload()
    {
        // TODO: Implement reload() method.

        $pidFile = $this->getSwooleSettingPidFile();
        if (file_exists($pidFile)) {
            PhpHelper::opCacheClear();
            $pid = file_get_contents($pidFile);
            if (! swoole_process::kill($pid, 0)) {
                throw new Exception("Service PID : {$pid} does not exist ");
            }
            swoole_process::kill($pid, SIGUSR1);
            return $this->info('Service PID: ' . $pid . ' send notification overload service to all worker processes, the command is executed on ' . date('Y-m-d H:i:s') . PHP_EOL);
        }

        throw new Exception('Service PID file does not exist, please check if it is running in daemon mode!');
    }

    /**
     * Service restart
     * @return mixed|void
     * @throws Exception
     */
    public function restart()
    {
        // TODO: Implement restart() method.

        $this->stop();
        $this->start();
    }

    /**
     * Set service name
     * @param $server_name
     */
    public function setServerName($server_name)
    {
        if (in_array($server_name, [
            Server::SWOOLE_HTTP_SERVER,
            Server::SWOOLE_WEBSOCKET_SERVER,
            Server::SWOOLE_SERVER
        ])) {
            return $this->serverName = $server_name;
        }

        throw new Exception('Could not find it ' . $server_name . ' service');
    }

    /**
     * Get service name
     * @return string
     * @throws Exception
     */
    public function getServerName()
    {
        if (! $this->serverName) {
            throw new Exception('Please set Swoole service name first');
        }

        return $this->serverName;
    }

    /**
     * Get Swoole configuration
     * @return array
     * @throws Exception
     */
    public function getServerConfig($key = null, $default = null)
    {
        if (! $this->serverConfig) {
            if (! ($serverConfig = fnc()->c()->get('swoole.' . $this->getServerName(), []))) {
                throw new Exception('Please complete the swoole configuration to start the service');
            }

            $this->serverConfig = $serverConfig;
        }

        return ArrayHelper::get($this->serverConfig, $key, $default);
    }

    /**
     * Swoole service manager object
     * @return Server
     */
    public function getServer(): Server
    {
        if (! $this->server instanceof Server) {
            $this->server = new Server();
        }

        return $this->server;
    }

    /**
     * Set up the swoole daemon
     * @param bool $value
     */
    protected function setDaemonize(bool $value)
    {
        fnc()->c()->set('swoole.' . $this->getServerName() . '.setting.daemonize', $value);
    }

    /**
     * Whether daemon mode
     * @return bool
     */
    public function isDaemonize(): bool
    {
        return (bool) $this->getServerConfig('setting.daemonize', false);
    }

    /**
     * Get the main process name
     * @param $server_name
     * @return string
     */
    public function getMasterProcessName()
    {
        return $this->getServerName() . ' master';
    }

    /**
     * Get Swoole configuration pid_file file
     * @return string
     */
    protected function getSwooleSettingPidFile()
    {
        return $this->getServerConfig('setting.pid_file', fnc()->app()->getRootDirectory() . '/tmp/' . str_replace(' ', '-', $this->getServerName()) . '.pid');
    }

    /**
     * Get service running status
     * @return bool
     */
    protected function getServerStatus()
    {
        $pidFile = $this->getSwooleSettingPidFile();
        if (file_exists($pidFile)) {
            // Send a signal to the process, success indicates that it is in a running state
            return posix_kill(intval(file_get_contents($pidFile)), 0);
        }

        if ($is_running = SwooleHelper::processIsRunning($this->getMasterProcessName())) {
            $is_running = SwooleHelper::portIsRunning($this->getServerConfig('port'));
        }

        return $is_running;
    }

    /**
     * Get Swoole service status information
     */
    protected function getSwooleServerStatusInfo()
    {
        exec("ps axu | grep '{$this->getServerName()}' | grep -v grep", $output);

        // list all process
        $rows = SwooleHelper::getAllProcess($this->getServerName());

        // combine
        $headers = ['USER', 'PID', 'RSS', 'STAT', 'START', 'COMMAND'];
        foreach ($rows as $key => $value) {
            $rows[$key] = array_combine($headers, $value);
        }

        $this->table($headers, $rows);

        unset($table, $headers, $output);
    }

    /**
     * Handle the global mainSwooleServerEventsCreate event
     */
    protected function handleMainSwooleServerEventsCreate()
    {
        $swooleMainEventsClass = fnc()->c()->get('swoole.main_events');
        if (class_exists($swooleMainEventsClass)) {
            try {
                $refSwooleMainEvents = new ReflectionClass($swooleMainEventsClass);
                if(! $refSwooleMainEvents->implementsInterface(MainSwooleEventsInterface::class)){
                    throw new Exception('Global file of MainSwooleEventsInterface is not compatible ' . $swooleMainEventsClass);
                }
                unset($refSwooleMainEvents);
            } catch (Throwable $throwable){
                throw new Exception($throwable->getMessage());
            }
        } else {
            throw new Exception('Global event file is missing');
        }

        $class = new $swooleMainEventsClass();

        // init swoole handle
        $class->initialize();

        // Register main swoole events
        $classFunctions = get_class_methods($class);
        foreach ($classFunctions as $event) {
            if ('on' != substr($event, 0, 2)) {
                continue;
            }

            $this->getServer()->getEventsRegister()->addEvent(lcfirst(substr($event, 2)), [$class, $event]);
        }

        // init swoole event handle
        $class->mainSwooleServerEventsCreate(
            $this->getServer()->getEventsRegister(),
            $this->getServer()->getServer()
        );
    }

    /**
     * This function is called back in the main thread of the master process (master) after startup
     * @param swoole_server $server
     * @throws Exception
     */
    public function onStart(swoole_server $server)
    {
        $listeners = fnc()->c()->get('swoole.listeners', []);
        foreach ($listeners as $listener) {
            switch ($listener['sock_type']) {
                case SWOOLE_SOCK_UDP:
                    $sockType = 'udp';
                    break;
                case SWOOLE_SOCK_TCP:
                    $sockType = 'tcp';
                    break;
                default:
                    $sockType = 'sock_type:' . $listener['sock_type'];
            }

            $this->line(PHP_EOL . sprintf('<info>SUCCESS</info> <info> ></info> <question>Listen</question> : <info>%s://%s:%s</info>', $sockType, $listener['host'], $listener['port']) . PHP_EOL);
        }
    }

    /**
     * This event is triggered when the management process starts
     * @param swoole_server $server
     * @throws Exception
     */
    public function onManagerStart(swoole_server $server)
    {
        SwooleHelper::setProcessRename($this->getServerName() . ' manager');
        $this->line(PHP_EOL . sprintf('<info>SUCCESS</info> Server <question>Manager</question> [<info>%s</info>] is started', $server->manager_pid) . PHP_EOL);
    }

    /**
     * This event occurs when the Worker process/Task process starts, and the objects created here can be used during the process life cycle
     * @param swoole_server $server
     * @param               $workerId
     */
    public function onWorkerStart(swoole_server $server, $workerId)
    {
        $worker_name = $server->taskworker ? 'task' : 'worker';
        SwooleHelper::setProcessRename($this->getServerName() . ' ' . $worker_name);
        $this->line(PHP_EOL . sprintf('<info>SUCCESS</info> Server <comment>%s</comment> [<info>%s</info>] is started [<info>%s</info>]', ucfirst($worker_name), $server->worker_pid, $workerId) . PHP_EOL);
    }
}